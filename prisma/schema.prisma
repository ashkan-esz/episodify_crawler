generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RelatedMovie {
  date         DateTime      @default(now())
  movieId      String
  relatedId    String
  relation     titleRelation
  movie        Movie         @relation(fields: [movieId], references: [movieId], onDelete: Cascade, onUpdate: Cascade)
  // Self-referencing relation to represent related movies
  relatedMovie Movie?        @relation(fields: [relatedId], references: [movieId], onDelete: Cascade, onUpdate: Cascade, name: "relatedMovies")

  @@unique([movieId, relatedId])
}

model Movie {
  // id               Int    @id @default(autoincrement())
  movieId          String @id @unique
  likes_count      Int    @default(0)
  dislikes_count   Int    @default(0)
  favorite_count   Int    @default(0)
  dropped_count    Int    @default(0)
  finished_count   Int    @default(0)
  follow_count     Int    @default(0)
  watchlist_count  Int    @default(0)
  continue_count   Int    @default(0)
  view_count       Int    @default(0)
  view_month_count Int    @default(0)

  relatedMovies  RelatedMovie[]
  relatedMovies2 RelatedMovie[] @relation("relatedMovies")

  credits Credit[]
}

model Staff {
  id             Int      @id @unique @default(autoincrement())
  name           String   @unique
  rawName        String
  tvmazePersonID Int      @default(0)
  jikanPersonID  Int      @default(0)
  gender         String   @default("")
  originalImages String[] @default([])
  insert_date    DateTime @default(now())
  update_date    DateTime @default(now())
  about          String   @default("")
  age            Int      @default(0)
  birthday       String   @default("")
  country        String   @default("")
  deathday       String   @default("")
  eyeColor       String   @default("")
  hairColor      String   @default("")
  height         String   @default("")
  weight         String   @default("")
  likes_count    Int      @default(0)
  dislikes_count Int      @default(0)
  follow_count   Int      @default(0)

  imageData CastImage?
  credits   Credit[]

  @@index([name, rawName])
}

model Character {
  id             Int      @id @unique @default(autoincrement())
  name           String   @unique
  rawName        String
  tvmazePersonID Int      @default(0)
  jikanPersonID  Int      @default(0)
  gender         String   @default("")
  originalImages String[] @default([])
  insert_date    DateTime @default(now())
  update_date    DateTime @default(now())
  about          String   @default("")
  age            Int      @default(0)
  birthday       String   @default("")
  country        String   @default("")
  deathday       String   @default("")
  eyeColor       String   @default("")
  hairColor      String   @default("")
  height         String   @default("")
  weight         String   @default("")
  likes_count    Int      @default(0)
  dislikes_count Int      @default(0)
  favorite_count Int      @default(0)

  imageData CastImage?
  credits   Credit[]

  @@index([name, rawName])
}

model CastImage {
  originalSize Int
  originalUrl  String
  size         Int
  thumbnail    String
  blurHash     String
  url          String     @unique
  vpnStatus    String
  staffId      Int?       @unique
  characterId  Int?       @unique
  staff        Staff?     @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  character    Character? @relation(fields: [characterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Credit {
  id             Int      @id @unique @default(autoincrement())
  movieId        String
  staffId        Int?
  characterId    Int?
  actorPositions String[]
  characterRole  String

  movie     Movie      @relation(fields: [movieId], references: [movieId], onDelete: Cascade, onUpdate: Cascade, map: "movie")
  staff     Staff?     @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "staff")
  character Character? @relation(fields: [characterId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "character")

  @@unique([movieId, staffId, characterId, actorPositions])
}

enum titleRelation {
  prequel
  sequel
  spin_off
  side_story
  full_story
  summary
  parent_story
  other
  alternative_setting
  alternative_version
}
